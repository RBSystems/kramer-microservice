package monitor

import (
	"fmt"
	"log"
	"net"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/byuoitav/common/events"
	"github.com/byuoitav/common/structs"
	"github.com/byuoitav/kramer-microservice/via"
)

var (
	pihost     string
	hostname   string
	buildingID string
	room       string
)

func init() {
	var err error

	pihost = os.Getenv("PI_HOSTNAME")
	if len(pihost) == 0 {
		log.Fatalf("PI_HOSTNAME not set.")
	}

	hostname, err = os.Hostname()
	if err != nil {
		hostname = pihost
	}

	split := strings.Split(pihost, "-")
	buildingID = split[0]
	room = split[1]
}

type message struct {
	EventType string
	Action    string
	User      string
	State     string
}

// Read events and send them to console
func readPump(pconn *net.TCPConn, event events.Event) {
	defer pconn.Close()

	for {
		var m message
		Buffer := make([]byte, 0, 2048)
		tmp := make([]byte, 256)

		r, err := pconn.Read(tmp)
		if err != nil {
			err = fmt.Errorf("error reading from system: %s", err.Error())
			log.Printf(err.Error())
		}
		Buffer = append(Buffer, tmp[:r]...)

		fmt.Println(string(Buffer))
		str := fmt.Sprintf("%s", Buffer)
		Out := strings.Split(str, "|")
		switch events := Out[0]; events {
		case "PList":
			m.EventType = Out[0]
			m.Action = Out[1]
			m.User = Out[2]
			m.State = Out[3]
		case "MediaStatus":
			m.EventType = Out[0]
			m.Action = Out[1]
			m.User = ""
			m.State = Out[2]
		case "DisplayStatus":
			m.EventType = Out[0]
			m.Action = Out[1]
			m.User = Out[2]
			m.State = Out[3]
		}
		event.Timestamp = time.Now().Format(time.RFC3339)
		event.Event.EventInfoKey = m.EventType
		event.Event.EventInfoValue = m.State
		event.Event.User = m.User

		// changed: add event stuff
		eventNode().PublishEvent(events.Metrics, event)
	}
}

// StartMonitoring service for each VIA in a room
func StartMonitoring(device structs.Device) *net.TCPConn {
	fmt.Printf("Building Connection and starting read buffer for %s\n", device.Address)
	addr := device.Address
	pconn, err := via.PersistConnection(addr)
	if err != nil {
		err = fmt.Errorf("error reading response: %s", err.Error())
		return nil
	}

	// start event node
	_ = eventNode()

	// build base event to send along with each event
	event := events.Event{
		Hostname:         pihost,
		LocalEnvironment: true,
		Building:         buildingID,
		Room:             room,
		Event: events.EventInfo{
			Type:       events.DETAILSTATE,
			Requestor:  hostname,
			EventCause: events.AUTOGENERATED,
			Device:     device.Name,
			DeviceID:   device.ID,
		},
	}

	go readPump(pconn, event)
	return pconn
}

var once sync.Once
var node *events.EventNode

func eventNode() *events.EventNode {
	once.Do(func() {
		router := os.Getenv("EVENT_ROUTER_ADDRESS")
		if len(router) == 0 {
			log.Fatalf("EVENT_ROUTER_ADDRESS is not set.")
		}
		node = events.NewEventNode("Kramer Microservice", router, []string{})
	})

	return node
}
